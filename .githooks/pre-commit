#!/bin/sh

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Running pre-commit checks..."

# Get list of staged PHP files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$')

if [ -z "$STAGED_FILES" ]; then
    echo "No PHP files to check"
    exit 0
fi

# Check for debugging statements
echo "\nüìã Checking for debug statements..."
DEBUG_PATTERNS="\\b(dd|dump|var_dump|print_r|die|exit|ray|ddd)\\("
FOUND_DEBUG=0

for FILE in $STAGED_FILES; do
    if grep -E "$DEBUG_PATTERNS" "$FILE" > /dev/null; then
        echo "${RED}‚ùå Found debug statement in: $FILE${NC}"
        grep -n -E "$DEBUG_PATTERNS" "$FILE" | while read -r line; do
            echo "   ${YELLOW}$line${NC}"
        done
        FOUND_DEBUG=1
    fi
done

if [ $FOUND_DEBUG -eq 0 ]; then
    echo "${GREEN}‚úì No debug statements found${NC}"
fi

# Run PHP lint check
echo "\nüßπ Running PHP lint check..."
LINT_ERRORS=0

for FILE in $STAGED_FILES; do
    php -l "$FILE" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "${RED}‚ùå Syntax error in: $FILE${NC}"
        php -l "$FILE" 2>&1 | grep -v "Errors parsing"
        LINT_ERRORS=1
    fi
done

if [ $LINT_ERRORS -eq 0 ]; then
    echo "${GREEN}‚úì All PHP files passed lint check${NC}"
fi

# Check if Laravel Pint is available and run it
if [ -f "vendor/bin/pint" ]; then
    echo "\nüé® Running Laravel Pint..."
    
    # Create temp file to store Pint output
    PINT_OUTPUT=$(mktemp)
    
    # Run Pint in test mode on staged files
    echo $STAGED_FILES | xargs ./vendor/bin/pint --test > "$PINT_OUTPUT" 2>&1
    PINT_EXIT_CODE=$?
    
    if [ $PINT_EXIT_CODE -ne 0 ]; then
        echo "${RED}‚ùå Code style issues found:${NC}"
        cat "$PINT_OUTPUT" | tail -n +2  # Skip first line
        echo "${YELLOW}Run './vendor/bin/pint' to fix automatically${NC}"
    else
        echo "${GREEN}‚úì Code style check passed${NC}"
    fi
    
    rm -f "$PINT_OUTPUT"
else
    echo "${YELLOW}‚ö†Ô∏è  Laravel Pint not found. Skipping code style check.${NC}"
    PINT_EXIT_CODE=0
fi

# Exit with error if any check failed
if [ $FOUND_DEBUG -eq 1 ] || [ $LINT_ERRORS -eq 1 ] || [ $PINT_EXIT_CODE -ne 0 ]; then
    echo "\n${RED}‚ùå Pre-commit checks failed!${NC}"
    echo "${YELLOW}Your commit message has been preserved. Fix the issues and try again.${NC}"
    exit 1
fi

echo "\n${GREEN}‚úÖ All pre-commit checks passed!${NC}"
exit 0